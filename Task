Objectives:
    1. Study and understand the Behavioral Design Patterns.

    2. As a continuation of the previous laboratory work, think about what communication between software entities might be involed in your system.

    3. Implement some additional functionalities using behavioral design patterns.

Theoretical background:
    In software engineering, behavioral design patterns have the purpose of identifying common communication patterns between different software entities. By doing so, these patterns increase flexibility in carrying out this communication.

    Some examples from this category of design patterns are :

Chain of Responsibility
Command
Interpreter
Iterator
Mediator
Observer
Strategy
Main tasks :
    1. By extending your project, implement at least 1 behavioral design pattern in your project:

The implemented design pattern should help to perform the tasks involved in your system.
The behavioral DPs can be integrated into you functionalities alongside the structural ones.
There should only be one client for the whole system.
    2. Keep your files grouped (into packages/directories) by their responsibilities (an example project structure):

client;
domain;
utilities;
data(if applies);
    3. Document your work in a separate markdown file according to the requirements presented below (the structure can be extended of course):

Topic of the laboratory work.
Author.
Introduction/Theory/Motivation.
Implementation & Explanation (you can include code snippets as well):
Indicate the location of the code snippet.
Emphasize the main idea and motivate the usage of the pattern.
Results/Screenshots/Conclusions;
